trigger:
- main

variables:
  vmImageName: 'ubuntu-latest'

  Path_Tests: './src/BenchmarkingDapperEFCoreCRMSqlServer'
  Path_ArtifactsBenchmarking: '/src/BenchmarkingDapperEFCoreCRMSqlServer/BenchmarkDotNet.Artifacts/results'
  ArtifactBenchmarkingHtml: 'BenchmarkingDapperEFCoreCRMSqlServer.Tests.CRMTests-report.html'
  ArtifactBenchmarkingMarkdown: 'BenchmarkingDapperEFCoreCRMSqlServer.Tests.CRMTests-report-github.md'
  NoContatosPorCompanhia: '2'

stages:
- stage: Tests
  displayName: Tests stage
  jobs:
  - job: Tests
    displayName: Tests
    pool:
      vmImage: $(vmImageName)
    steps:
    - script: |
        cd /usr/bin
        ls
      displayName: Exibir arquivos do diretorio /usr/bin (utilitarios instalados)
    - script: |
        docker images
        echo ''
        docker container ls
      displayName: Exibir imagens e container em execução
    - script: |
        cd $(Path_Tests)
        ls
        dotnet run --filter BenchmarkingDapperEFCoreCRMSqlServer.Tests.* -c Release
      displayName: Executar benchmarking com testes de performance - Entity Framework Core x Dapper x ADO x Dapper.Contrib
      env:
        NumeroContatosPorCompanhia: $(NoContatosPorCompanhia)
    - script: |
        cd $(Build.SourcesDirectory)/$(Path_ArtifactsBenchmarking)
        pwd
        ls
      displayName: Exibir arquivos gerados como resultado dos testes
    - task: PublishHtmlReport@1
      inputs:
        reportDir: '$(Build.SourcesDirectory)/$(Path_ArtifactsBenchmarking)/$(ArtifactBenchmarkingHtml)'
      displayName: Publicar resultado no formato HTML
    - task: PublishMarkdownReports@1
      inputs:
        contentPath: '$(Build.SourcesDirectory)/$(Path_ArtifactsBenchmarking)'
        indexFile: '$(ArtifactBenchmarkingMarkdown)'
      displayName: Publicar resultado no formato Markdown
    - script: |
        docker images
        docker container ls
      displayName: Exibir imagens e containers no ambiente